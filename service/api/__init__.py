import os
import sys
import logging
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# Adiciona o diret√≥rio raiz do projeto ao PYTHONPATH (melhor configurar no ambiente)
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from api.routes.router import routes
from api.hf_models import lifespan
from config import DevelopmentConfig, TestingConfig, ProductionConfig


def create_api(config_name="production"):
    """
    Cria o objeto FastAPI e configura o ambiente e as rotas.
    """
    app = FastAPI(
        title="API de Infer√™ncia para Modelos de Reconhecimento de Formas Geom√©tricas",
        version="1.1",
        description=(
            "Esta API fornece infer√™ncia de modelos treinados para **reconhecimento de formas geom√©tricas** "
            "tanto **Tridimensionais (3D)** quanto **Bidimensionais (2D)**. "
            "Desenvolvida pela **Inteceleri** e pelo **LPO**, ela permite o envio de imagens para **classifica√ß√£o**, "
            "utilizando redes neurais profundas baseadas em ResNet-50 e outros modelos treinados. \n\n"
            
            "üîπ **Principais Funcionalidades:**\n"
            "‚úîÔ∏è **Classifica√ß√£o de Formas Geom√©tricas 3D** (cilindro, cone, esfera, paralelep√≠pedo, etc.)\n"
            "‚úîÔ∏è **Classifica√ß√£o de Formas Geom√©tricas 2D** (c√≠rculo, quadrado, tri√¢ngulo, ret√¢ngulo, etc.)\n"
            "‚úîÔ∏è Suporte a **upload de imagens** para infer√™ncia\n"
            "‚úîÔ∏è Modelos otimizados para **alta precis√£o e desempenho**\n\n"

            "üìå **Tecnologias Utilizadas:**\n"
            "- üñ•Ô∏è **FastAPI** para cria√ß√£o da API\n"
            "- üß† **Hugging Face Transformers** para carregamento do modelo\n"
            "- üî• **PyTorch** para infer√™ncia de deep learning\n\n"

            "üìù **Como Usar:**\n"
            "1Ô∏è‚É£ Fa√ßa o upload de uma imagem contendo uma **forma geom√©trica** para a rota espec√≠fica.\n"
            "2Ô∏è‚É£ A API processar√° a imagem e retornar√° a **classe predita**.\n"
            "3Ô∏è‚É£ Utilize os endpoints `/resnet3d` para modelos 3D e `EM BREVE` para modelos 2D.\n\n"

            "üìç **Exemplo de Entrada:**\n"
            "Envie um arquivo de imagem no formato **JPEG ou PNG** via requisi√ß√£o `POST`.\n\n"
            
            "üì§ **Exemplo de Resposta:**\n"
            "```json\n"
            "{\n"
            "    \"prediction\": \"Esfera\"\n"
            "}\n"
            "```\n"
        ),
        lifespan=lifespan,
        root_path="/inteceleri/models/api/" # URL Path: https://services.liis.com.br{path}
    )

    # Configura√ß√µes baseadas no ambiente
    configure_api(app, config_name)

    # Registrar as rotas
    for route in routes:
        app.include_router(route, prefix="")

    app.state.logger.debug(f"Rotas registradas")

    return app


def configure_api(app, config_name):
    """
    Configura√ß√µes de acordo com o ambiente (produ√ß√£o, desenvolvimento, teste).
    """
    config_class = None
    log_level = logging.INFO  # Padr√£o para produ√ß√£o

    if config_name == "development":
        config_class = DevelopmentConfig()
        log_level = logging.DEBUG  # Mais verboso no ambiente de desenvolvimento
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],  # Lista de origens permitidas
            allow_credentials=True,
            allow_methods=["*"],  # Permite todos os m√©todos HTTP
            allow_headers=["*"],  # Permite todos os headers
        )

    elif config_name == "testing":
        config_class = TestingConfig()
        log_level = logging.DEBUG

    elif config_name == "production":
        config_class = ProductionConfig()
        log_level = logging.INFO

    else:
        raise ValueError(f"Configura√ß√£o desconhecida: {config_name}")

    # Definindo as configura√ß√µes no app.state
    app.state.config = config_class

    # Configura√ß√£o correta do logging
    logging.basicConfig(
        level=log_level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler()]  # Envia logs para stdout
    )

    # Criar logger principal da API e armazenar em `app.state`
    app.state.logger = logging.getLogger("api")
    app.state.logger.setLevel(log_level)
    app.state.logger.info(f"API iniciada no ambiente: {config_name}")
